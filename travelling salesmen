from itertools import permutations

def calculate_path_cost(path, distances):
    """Calculate the total cost of a given path."""
    cost = 0
    for i in range(len(path) - 1):
        cost += distances[path[i]][path[i + 1]]
    cost += distances[path[-1]][path[0]]  # Return to the starting point
    return cost

def tsp_bruteforce(distances):
    """Solve the TSP using brute-force approach."""
    num_cities = len(distances)
    cities = list(range(num_cities))
    shortest_path = None
    min_cost = float('inf')
    
    for perm in permutations(cities):
        cost = calculate_path_cost(perm, distances)
        if cost < min_cost:
            min_cost = cost
            shortest_path = perm
            
    return shortest_path, min_cost

# Example usage
if __name__ == "__main__":
    # Define a distance matrix (symmetric for simplicity)
    distances = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]
    
    path, cost = tsp_bruteforce(distances)
    print(f"Optimal path: {path}")
    print(f"Minimum cost: {cost}")
