def dfs_recursive(graph, node, visited=None):
    """Perform DFS on the graph starting from the node using recursion."""
    if visited is None:
        visited = set()  # Initialize visited set if not provided
    
    # Visit the node
    print(node, end=' ')
    visited.add(node)
    
    # Recur for all the adjacent nodes
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs_recursive(graph, neighbor, visited)

# Example usage
if __name__ == "__main__":
    # Define a graph using an adjacency list
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }
    
    print("DFS Traversal starting from node 'A':")
    dfs_recursive(graph, 'A')
