import heapq

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # Cost from start to current node
        self.h = 0  # Heuristic cost from current node to goal
        self.f = 0  # Total cost (f = g + h)
    
    def __lt__(self, other):
        return self.f < other.f

def astar(grid, start, goal):
    """Perform A* algorithm on the grid."""
    # Initialize start and goal nodes
    start_node = Node(start)
    goal_node = Node(goal)
    
    # Initialize open and closed lists
    open_list = []
    closed_list = set()
    
    heapq.heappush(open_list, start_node)
    
    while open_list:
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)
        
        if current_node.position == goal_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path
        
        # Generate neighbors (up, down, left, right)
        (x, y) = current_node.position
        neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
        
        for next_pos in neighbors:
            if not is_valid_position(next_pos, grid) or next_pos in closed_list:
                continue
            
            neighbor_node = Node(next_pos, current_node)
            neighbor_node.g = current_node.g + 1
            neighbor_node.h = heuristic(next_pos, goal_node.position)
            neighbor_node.f = neighbor_node.g + neighbor_node.h
            
            # Check if the neighbor is already in the open list with a lower cost
            if any(node.position == neighbor_node.position and node.f <= neighbor_node.f for node in open_list):
                continue
            
            heapq.heappush(open_list, neighbor_node)
    
    return None  # Path not found

def is_valid_position(position, grid):
    """Check if the position is valid (within bounds and not an obstacle)."""
    (x, y) = position
    return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] == 0

def heuristic(pos1, pos2):
    """Calculate the heuristic cost (Manhattan distance)."""
    return abs(pos1[0] - pos2[0]) + abs(pos1[1] - pos2[1])

# Example usage
if __name__ == "__main__":
    # Define a grid (0 = open, 1 = obstacle)
    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 1, 0, 1, 0],
        [0, 0, 0, 0, 0]
    ]
    
    start = (0, 0)
    goal = (4, 4)
    
    path = astar(grid, start, goal)
    
    if path:
        print("Path found:", path)
    else:
        print("No path found.")
