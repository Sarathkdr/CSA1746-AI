def print_board(board):
    """Print the Tic-Tac-Toe board."""
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    """Check if the current player has won."""
    # Check rows, columns, and diagonals
    win_conditions = [
        # Rows
        [board[0][0], board[0][1], board[0][2]],
        [board[1][0], board[1][1], board[1][2]],
        [board[2][0], board[2][1], board[2][2]],
        # Columns
        [board[0][0], board[1][0], board[2][0]],
        [board[0][1], board[1][1], board[2][1]],
        [board[0][2], board[1][2], board[2][2]],
        # Diagonals
        [board[0][0], board[1][1], board[2][2]],
        [board[0][2], board[1][1], board[2][0]]
    ]
    
    return [player, player, player] in win_conditions

def is_board_full(board):
    """Check if the board is full."""
    return all(cell != ' ' for row in board for cell in row)

def play_game():
    """Play the Tic-Tac-Toe game."""
    # Initialize the board
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'
    
    print("Tic-Tac-Toe Game!")
    print_board(board)
    
    while True:
        print(f"Player {current_player}'s turn")
        
        # Get the player's move
        try:
            row = int(input("Enter row (0, 1, 2): "))
            col = int(input("Enter column (0, 1, 2): "))
            if board[row][col] != ' ':
                print("Cell already taken. Try again.")
                continue
        except (IndexError, ValueError):
            print("Invalid input. Try again.")
            continue
        
        # Make the move
        board[row][col] = current_player
        print_board(board)
        
        # Check for a winner
        if check_winner(board, current_player):
            print(f"Player {current_player} wins!")
            break
        
        # Check for a draw
        if is_board_full(board):
            print("It's a draw!")
            break
        
        # Switch player
        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    play_game()
